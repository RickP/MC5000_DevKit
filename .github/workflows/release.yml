name: Publish_release

on: push


jobs:
  
  once:
    name: Create GitHub release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: true

  build_gui_osx:
    name: Create MacOS GUI for x86_64
    runs-on: macos-10.15
    needs: once
    outputs:
      upload_url: ${{ needs.once.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.12.2
        with:
          version: '5.12.8'
      - name: Compile QT app
        run: |
          cd gui
          qmake
          make
        shell: bash
      - name: Package app
        run: |
          cd gui
          macdeployqt MC5000-GUI.app -qmldir=..
        shell: bash
      - name: Sign app and send to notarization
        env:
          DEV_USER: ${{ secrets.APPLE_DEV_USER }}
          DEV_PW: ${{ secrets.APPLE_DEV_PASS }}
          DEV_CERT: ${{ secrets.APPLE_DEV_CERT }}
        run: |
          echo $DEV_CERT | base64 --decode > certificate.p12
          security create-keychain -p "$DEV_PW" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$DEV_PW" build.keychain
          security import certificate.p12 -k build.keychain -P "$DEV_PW" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$DEV_PW" build.keychain
          DEV_CERT_ID=$(security find-identity -v | grep "Developer ID Application" | awk -F"[()]" '{print $3}')
          cd gui
          codesign -vvv --deep --strict --options=runtime --sign $DEV_CERT_ID MC5000-GUI.app
          hdiutil create -srcfolder MC5000-GUI.app MC5000-GUI.dmg
          codesign -vvv --strict --options=runtime --sign $DEV_CERT_ID MC5000-GUI.dmg
          xcrun altool -t osx -f MC5000-GUI.dmg --primary-bundle-id "org.rickp.mc5000" --notarize-app -u "$DEV_USER" -p "$DEV_PW"
        shell: bash
      - uses: actions/upload-artifact@v2
        name: Archive build artifact
        with:
          name: macos-dmg-file
          path: gui/MC5000-GUI.dmg
   
  wait_for_notarization:
    name: Wait five minutes for notarization to complete
    runs-on: ubuntu-latest
    needs: build_gui_osx
    outputs:
      upload_url: ${{ needs.build_gui_osx.outputs.upload_url }}
    steps:
    - name: Sleep
      uses: jakejarvis/wait-action@master
      with:
        time: '5m'    
          
  staple_osx_app:
    name: Staple notarization to MacOS GUI
    runs-on: macos-10.15
    needs: wait_for_notarization
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: macos-dmg-file
      - name: Staple app
        run: |
          xcrun stapler staple "MC5000-GUI.dmg"
      - uses: actions/upload-release-asset@v1
        name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.wait_for_notarization.outputs.upload_url }}
          asset_path: MC5000-GUI.dmg
          asset_name: MC5000-GUI_MacOS-x86_64.dmg
          asset_content_type: application/octet-stream