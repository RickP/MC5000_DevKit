name: Build_app

on:
  push:
    tags:
      - v*

jobs:
  
  once:
    name: Create GitHub release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: true
  
  build_gui_linux_x64:
    name: Create Linux GUI for x86_64
    runs-on: ubuntu-18.04
    needs: once
    steps:
      - uses: actions/checkout@v2
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.12.2
        with:
          version: '5.12.8'
      - name: Install dependencies
        run: |
          sudo apt-get install -y libxcb* patchelf libgl1-mesa-dev
          cd gui
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod 755 linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod 755 linuxdeploy-plugin-qt-x86_64.AppImage
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod 755 appimagetool-x86_64.AppImage
        shell: bash
      - name: Compile QT app
        run: |
          cd gui
          qmake
          make
        shell: bash
      - name: Make AppImage 
        env:
          QML_SOURCES_PATHS: .
        run: |
          cd gui
          ./linuxdeploy-x86_64.AppImage --plugin qt --appdir AppDir -d imagebuilder/MC5000.desktop -e MC5000-GUI -i icons/icon.png
          ./appimagetool-x86_64.AppImage AppDir
        shell: bash
      - uses: actions/upload-release-asset@v1
        name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }}
          asset_path: gui/MC5000-GUI_Linux-x86_64.AppImage
          asset_name: MC5000-GUI_Linux-x86_64.AppImage
          asset_content_type: application/octet-stream

  build_gui_linux_arm64:
    name: Create Linux GUI for arm64
    runs-on: ubuntu-latest
    needs: once
    steps:
      - uses: actions/checkout@v2
      - uses: uraimo/run-on-arch-action@v2.0.9
        name: Build GUI 
        with:
          arch: aarch64
          distro: ubuntu20.04
          # Not required, but speeds up builds
          githubToken: ${{ github.token }} 
          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}:${PWD}"
            --workdir "${PWD}"
            --device /dev/fuse
            --cap-add SYS_ADMIN 
            --security-opt apparmor:unconfined
          # The shell to run commands with in the container
          shell: /bin/sh
          env: | # YAML, but pipe character is necessary
            QML_SOURCES_PATHS: .
          install: |
            apt-get update
            apt-get install -y --no-install-recommends build-essential qtbase5-dev qt5-default qtdeclarative5-dev \
                      qml-module-qt-labs-platform qml-module-qtquick-* libqt5serialport5-dev wget git cmake zip \
                      unzip libfuse-dev autotools-dev patchelf automake libtool xxd desktop-file-utils pkg-config \
                      libglib2.0-dev libcairo2-dev libssl-dev libjpeg-dev libpng-dev cimg-dev ca-certificates
            apt-get clean
            git clone https://github.com/AppImage/AppImageKit.git --recursive --depth 1 && \
            cd AppImageKit && \
            cmake . && \
            make && \
            make install && \
            cd .. && \
            rm -r AppImageKit
            git clone https://github.com/linuxdeploy/linuxdeploy.git --recursive --depth 1 && \
            cd linuxdeploy && \
            cmake . && \
            make && \
            mv bin/linuxdeploy /usr/local/bin && \
            cd .. && \
            rm -r linuxdeploy
            git clone https://github.com/linuxdeploy/linuxdeploy-plugin-qt.git --recursive --depth 1 && \
            cd linuxdeploy-plugin-qt && \
            cmake . && \
            make && \
            mv bin/linuxdeploy-plugin-qt /usr/local/bin && \
            cd .. && \
            rm -r linuxdeploy-plugin-qt
          run: |
            cd gui
            qmake
            make
            linuxdeploy --plugin qt --appdir AppDir -d imagebuilder/MC5000.desktop -e MC5000-GUI -i icons/icon.png
            appimagetool AppDir      
      - uses: actions/upload-release-asset@v1
        name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }}
          asset_path: gui/MC5000-GUI_Linux-aarch64.AppImage
          asset_name: MC5000-GUI_Linux-arm64.AppImage
          asset_content_type: application/octet-stream

  build_gui_osx:
    name: Create MacOS GUI for x86_64
    runs-on: macos-10.15
    needs: once
    steps:
      - uses: actions/checkout@v2
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.12.2
        with:
          version: '5.12.8'
      - name: Compile QT app
        run: |
          cd gui
          qmake
          make
        shell: bash
      - name: Package app
        run: |
          cd gui
          macdeployqt MC5000-GUI.app -qmldir=..
        shell: bash
      - name: Sign app and send to notarization
        env:
          DEV_USER: ${{ secrets.APPLE_DEV_USER }}
          DEV_PW: ${{ secrets.APPLE_DEV_PASS }}
          DEV_CERT: ${{ secrets.APPLE_DEV_CERT }}
        run: |
          echo $DEV_CERT | base64 --decode > certificate.p12
          security create-keychain -p "$DEV_PW" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$DEV_PW" build.keychain
          security import certificate.p12 -k build.keychain -P "$DEV_PW" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$DEV_PW" build.keychain
          DEV_CERT_ID=$(security find-identity -v | grep "Developer ID Application" | awk -F"[()]" '{print $3}')
          cd gui
          codesign -vvv --deep --strict --options=runtime --sign $DEV_CERT_ID MC5000-GUI.app
          hdiutil create -srcfolder MC5000-GUI.app MC5000-GUI.dmg
          codesign -vvv --strict --options=runtime --sign $DEV_CERT_ID MC5000-GUI.dmg
          xcrun altool -t osx -f MC5000-GUI.dmg --primary-bundle-id "org.rickp.mc5000" --notarize-app -u "$DEV_USER" -p "$DEV_PW"
        shell: bash
      - uses: actions/upload-artifact@v2
        name: Archive build artifact
        with:
          name: macos-dmg-file
          path: gui/MC5000-GUI.dmg
   
  wait_for_notarization:
    name: Wait five minutes for notarization to complete
    runs-on: ubuntu-latest
    needs: build_gui_osx
    steps:
    - name: Sleep
      uses: jakejarvis/wait-action@master
      with:
        time: '5m'    
          
  staple_osx_app:
    name: Staple notarization to MacOS GUI
    runs-on: macos-10.15
    needs: wait_for_notarization
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: macos-dmg-file
      - name: Staple app
        run: |
          xcrun stapler staple "MC5000-GUI.dmg"
      - uses: actions/upload-release-asset@v1
        name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.wait_for_notarization.needs.build_gui_osx.needs.once.outputs.upload_url }}
          asset_path: MC5000-GUI.dmg
          asset_name: MC5000-GUI_MacOS-x86_64.dmg
          asset_content_type: application/octet-stream

  build_gui_windows:
    name: Create Windows GUI for x86_64 
    runs-on: windows-2019
    needs: once
    steps:
      - uses: actions/checkout@v2
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.12.2
        with:
          version: '5.12.8'
      - name: Compile QT app
        run: |
          call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd gui
          qmake
          nmake
          windeployqt --qmldir . release/MC5000-GUI.exe
          rename release MC5000-GUI
        shell: cmd
      - uses: papeloto/action-zip@v1
        name: Zip files
        with:
          files: gui/MC5000-GUI/
          dest: MC5000-GUI_Windows-x86_64.zip
      - uses: actions/upload-release-asset@v1
        name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }}
          asset_path: MC5000-GUI_Windows-x86_64.zip
          asset_name: MC5000-GUI_Windows-x86_64.zip
          asset_content_type: application/octet-stream
   
  build_firmware:
    name: Build microcontroller firmware
    runs-on: ubuntu-latest
    needs: once
    steps:
      - uses: actions/checkout@v2
      - name: Install SDCC compiler
        run: |
          wget https://qa.debian.org/watch/sf.php/sdcc/sdcc-4.1.0-amd64-unknown-linux2.5.tar.bz2
          tar xjvf sdcc-4.1.0-amd64-unknown-linux2.5.tar.bz2
          echo "$GITHUB_WORKSPACE/sdcc/bin" >> $GITHUB_PATH
      - name: Compile firmware
        run: |
          mkdir MC5000_firmware
          cd firmware/MC5000
          make
          cd ../BUZZER
          make
          cd ../DISPLAY
          make
          cd ../build
          cp *.ihx ../../MC5000_firmware
      - uses: papeloto/action-zip@v1
        name: Zip files
        with:
          files: MC5000_firmware
          dest: firmware.zip
      - uses: actions/upload-release-asset@v1
        name: Upload release assets   
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }}
          asset_path: firmware.zip
          asset_name: Padauk_PFS173_firmware.zip
          asset_content_type: application/octet-stream

  build_kicad_fabrication_files:
    name: Make PCB fabrication files
    runs-on: ubuntu-20.04
    needs: once
    steps:
      - uses: actions/checkout@v2
      - uses: nerdyscout/kicad-exports@v2.2
        with:
          config: pcb/jlcpcb_fab_files.kibot.yaml
          dir: 'pcb'
          board: 'pcb/MC5000_Board.kicad_pcb'
          schema: 'pcb/MC5000_Board.sch'
      - uses: papeloto/action-zip@v1
        name: Zip gerbers
        with:
          files: pcb/fabrication/gerbers
          dest: MC5000_gerbers.zip
      - name: Replace gerber dir with zipfile
        run: |
          sudo rm -r pcb/fabrication/gerbers
          sudo mv MC5000_gerbers.zip pcb/fabrication/
      - uses: papeloto/action-zip@v1
        name: Make release package
        with:
          files: pcb/fabrication
          dest: PCB_fabrication_files_for_jlcpcb.zip
      - uses: actions/upload-release-asset@v1
        name: Upload release assets   
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }}
          asset_path: PCB_fabrication_files_for_jlcpcb.zip
          asset_name: PCB_fabrication_files_for_jlcpcb.zip
          asset_content_type: application/octet-stream    