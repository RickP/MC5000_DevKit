name: Build_App

on: push

#on:
#  push:
#    tags:
#      - v*

jobs:
  
  once:
      name: Create GitHub release
      runs-on: ubuntu-latest
      outputs:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
      steps:
        - name: Create a release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ github.ref }}
            release_name: Release ${{ github.ref }}
            draft: true
            prerelease: true
  
  build_gui_linux_x64:
    name: Create Linux GUI for x86_64
    runs-on: ubuntu-18.04
    if: ${{ false }}  # disable for now
    needs: once
    steps:
      - uses: actions/checkout@v2
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.12.2
      - name: Install dependencies
        run: |
          sudo apt-get install -y libxcb* patchelf libgl1-mesa-dev
          cd gui
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod 755 linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod 755 linuxdeploy-plugin-qt-x86_64.AppImage
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod 755 appimagetool-x86_64.AppImage
        shell: bash
      - name: Compile QT app
        run: |
          cd gui
          qmake
          make
        shell: bash
      - name: Make AppImage 
        run: |
          cd gui
          QML_SOURCES_PATHS=. ./linuxdeploy-x86_64.AppImage --plugin qt --appdir AppDir -d imagebuilder/MC5000.desktop -e MC5000-GUI -i icons/icon.png
          ./appimagetool-x86_64.AppImage AppDir
          mv MC5000-GUI-x86_64.AppImage MC5000-GUI_Linux_x86_64.AppImage
        shell: bash
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }}
          asset_path: gui/MC5000-GUI_Linux_x86_64.AppImage
          asset_name: MC5000-GUI_Linux_x86_64.AppImage
          asset_content_type: application/octet-stream

  build_gui_linux_arm:
    name: Create Linux GUI for armhf and arm64
    runs-on: ubuntu-latest
    needs: once
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu20.04
          - arch: armv7
            distro: ubuntu20.04
    steps:
      - uses: actions/checkout@v2
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Build GUI 
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          # Not required, but speeds up builds
          githubToken: ${{ github.token }} 
          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts" 
          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}:${PWD}"
            --workdir "${PWD}"
            --device /dev/fuse
            --cap-add SYS_ADMIN 
            --security-opt apparmor:unconfined
          # The shell to run commands with in the container
          shell: /bin/sh
          install: |
            apt-get update
            apt-get install -y build-essential qtbase5-dev qt5-default qtdeclarative5-dev libqt5serialport5-dev wget git cmake zip unzip libfuse2
            case "${{ matrix.arch }}" in
              aarch64)
                wget --no-check-certificate https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage -O /usr/local/bin/appimagetool
                ;;
              armv7)
                wget --no-check-certificate https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-armhf.AppImage -O /usr/local/bin/appimagetool
                ;;
            esac
            chmod +x /usr/local/bin/appimagetool
          run: |
            cd gui
            qmake
            make
            appimagetool    

  build_gui_windows:
    name: Create Windows GUI
    runs-on: windows-2019
    if: ${{ false }}  # disable for now
    needs: once
    steps:
      - uses: actions/checkout@v2
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.12.2
        with:
          arch: win64_mingw81
      - name: Compile QT app
        run: |
          call "%programfiles(x86)%\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd gui
          qmake
          make
          windeployqt --qmldir . release/MC5000-GUI.exe
          rename release MC5000-GUI
        shell: cmd
      - name: Zip files
        uses: papeloto/action-zip@v1
        with:
          files: gui/MC5000-GUI/
          dest: MC5000-GUI_Windows_x86_64.zip
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }}
          asset_path: MC5000-GUI_Windows_x86_64.zip
          asset_name: MC5000-GUI_Windows_x86_64.zip
          asset_content_type: application/octet-stream
          
  build_firmware:
    name: Build microcontroller firmware
    runs-on: ubuntu-latest
    if: ${{ false }}  # disable for now
    needs: once
    steps:
      - uses: actions/checkout@v2
      - name: Install SDCC compiler
        run: |
          wget https://qa.debian.org/watch/sf.php/sdcc/sdcc-4.1.0-amd64-unknown-linux2.5.tar.bz2
          tar xjvf sdcc-4.1.0-amd64-unknown-linux2.5.tar.bz2
          echo "$GITHUB_WORKSPACE/sdcc/bin" >> $GITHUB_PATH
      - name: Compile firmware
        run: |
          mkdir MC5000_firmware
          cd firmware/MC5000
          make
          cd ../BUZZER
          make
          cd ../DISPLAY
          make
          cd ../build
          cp *.ihx ../../MC5000_firmware
      - name: Zip files
        uses: papeloto/action-zip@v1
        with:
          files: MC5000_firmware
          dest: firmware.zip   
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }}
          asset_path: firmware.zip
          asset_name: MC5000-Padauk_PFS173_firmware.zip
          asset_content_type: application/octet-stream
    